#!/usr/bin/env python
# -*- coding: utf-8 -*-

import numpy

# see http://wiki.planck.fr/index.php/Proc/RD12Parameters

SURVBEG = {"s1": 240,  "s2":  5721, "s3": 11195, "s4": 16692, "s5": 21721}
SURVEND = {"s1": 5720, "s2": 11194, "s3": 16691, "s4": 21720, "s5": 26050}

SURVBEG.update( {"nominal":   240, "full":   240, "hm1":   240, "hm2": 13145, "y1":   240, "y2": 11195})
SURVEND.update( {"nominal": 14723, "full": 26050, "hm1": 13144, "hm2": 26050, "y1": 11194, "y2": 21720})

NUMBEROFBOLO = 54

BOLOID = { # dictionary of bolometer ID for each bolometer pixel name, no popcorned, no dark bolometers
"100-1a": "00_100_1a", "100-1b": "01_100_1b", "100-2a": "20_100_2a", "100-2b": "21_100_2b",
"100-3a": "40_100_3a", "100-3b": "41_100_3b", "100-4a": "80_100_4a", "100-4b": "81_100_4b",
"143-1a": "02_143_1a", "143-1b": "03_143_1b", "143-2a": "30_143_2a", "143-2b": "31_143_2b",
"143-3a": "50_143_3a", "143-3b": "51_143_3b", "143-4a": "82_143_4a", "143-4b": "83_143_4b",
"143-5":  "10_143_5",  "143-6":  "42_143_6",  "143-7":  "60_143_7",
"217-1":  "04_217_1",  "217-2":  "22_217_2",  "217-3":  "52_217_3",  "217-4":  "84_217_4",
"217-5a": "11_217_5a", "217-5b": "12_217_5b", "217-6a": "43_217_6a", "217-6b": "44_217_6b",
"217-7a": "61_217_7a", "217-7b": "62_217_7b", "217-8a": "71_217_8a", "217-8b": "72_217_8b",
"353-1":  "05_353_1",  "353-2":  "13_353_2",
"353-3a": "23_353_3a", "353-3b": "24_353_3b", "353-4a": "32_353_4a", "353-4b": "33_353_4b",
"353-5a": "53_353_5a", "353-5b": "54_353_5b", "353-6a": "63_353_6a", "353-6b": "64_353_6b",
"353-7":  "45_353_7",  "353-8":  "85_353_8",
"545-1":  "14_545_1",  "545-2":  "34_545_2",                         "545-4":  "73_545_4",
"857-1":  "25_857_1",  "857-2":  "35_857_2",  "857-3":  "65_857_3",  "857-4":  "74_857_4"}

DETSETS = { # dictionary of detector sets
"100ds1": ("100-1a", "100-1b", "100-4a", "100-4b"),
"100ds2": ("100-2a", "100-2b", "100-3a", "100-3b"),
"143ds1": ("143-1a", "143-1b", "143-3a", "143-3b"),
"143ds2": ("143-2a", "143-2b", "143-4a", "143-4b"),
"143swb": ("143-5",  "143-6",  "143-7"           ),
"217ds1": ("217-5a", "217-5b", "217-7a", "217-7b"),
"217ds2": ("217-6a", "217-6b", "217-8a", "217-8b"),
"217swb": ("217-1",  "217-2",  "217-3",  "217-4" ),
"353ds1": ("353-3a", "353-3b", "353-5a", "353-5b"),
"353ds2": ("353-4a", "353-4b", "353-6a", "353-6b"),
"353swb": ("353-1",  "353-2",  "353-7",  "353-8" ),
"545ghz": ("545-1",  "545-2",            "545-4" ),
"857ghz": ("857-1",  "857-2",  "857-3",  "857-4" )}
DETSETS["100ghz"] = DETSETS["100ds1"] + DETSETS["100ds2"]
DETSETS["100psb"] = DETSETS["100ds1"] + DETSETS["100ds2"]
DETSETS["143psb"] = DETSETS["143ds1"] + DETSETS["143ds2"]
DETSETS["143ghz"] = DETSETS["143psb"] + DETSETS["143swb"]
DETSETS["217psb"] = DETSETS["217ds1"] + DETSETS["217ds2"]
DETSETS["217ghz"] = DETSETS["217psb"] + DETSETS["217swb"]
DETSETS["353psb"] = DETSETS["353ds1"] + DETSETS["353ds2"]
DETSETS["353ghz"] = DETSETS["353psb"] + DETSETS["353swb"]
DETSETS["lofreq"] = DETSETS["100ghz"] + DETSETS["143ghz"] + DETSETS["217ghz"] + DETSETS["353ghz"]
DETSETS["hifreq"] = DETSETS["545ghz"] + DETSETS["857ghz"]
DETSETS["all"]    = DETSETS["lofreq"] + DETSETS["hifreq"]
DETSETS["psb"]    = DETSETS["100psb"] + DETSETS["143psb"] + DETSETS["217psb"] + DETSETS["353psb"]
DETSETS["swb"]    = DETSETS["143swb"] + DETSETS["217swb"] + DETSETS["353swb"]
# add all single-detector detsets for ease of use
for d in BOLOID: DETSETS[d] = (d,)


#
# DX11CALIB, DX11MONOP and DX11NEP come from IMO 4.27
# (see function make_dictionaries_from_imo)
#

DX11CALIB = { # conversion factor from KCMB to Watts
"100-1a": 9.98929e-14, "100-1b": 1.22488e-13, "100-2a": 1.51546e-13, "100-2b": 1.58035e-13,
"100-3a": 1.38029e-13, "100-3b": 1.14552e-13, "100-4a": 1.46123e-13, "100-4b": 1.16753e-13,
"143-1a": 1.87259e-13, "143-1b": 1.60741e-13, "143-2a": 1.77637e-13, "143-2b": 1.81202e-13,
"143-3a": 1.78495e-13, "143-3b": 1.60738e-13, "143-4a": 1.65044e-13, "143-4b": 1.54786e-13,
"143-5":  2.6395e-13,  "143-6":  2.36995e-13, "143-7":  2.56619e-13,
"217-1":  1.67389e-13, "217-2":  1.61614e-13, "217-3":  1.70059e-13, "217-4":  1.65354e-13,
"217-5a": 1.13427e-13, "217-5b": 1.14376e-13, "217-6a": 1.14989e-13, "217-6b": 1.16227e-13,
"217-7a": 1.23498e-13, "217-7b": 1.18642e-13, "217-8a": 1.1918e-13,  "217-8b": 1.13096e-13,
"353-1":  5.70346e-14, "353-2":  6.20394e-14, "353-3a": 3.48625e-14, "353-3b": 3.37349e-14,
"353-4a": 2.86904e-14, "353-4b": 2.83174e-14, "353-5a": 3.27368e-14, "353-5b": 3.23329e-14,
"353-6a": 2.34751e-14, "353-6b": 2.12574e-14, "353-7":  4.70167e-14, "353-8":  4.42892e-14,
"545-1":  3.30836e-16, "545-2":  3.17769e-16,                        "545-4":  2.70598e-16,
"857-1":  3.43811e-16, "857-2":  3.78339e-16, "857-3":  3.25099e-16, "857-4":  2.28563e-16}

DX11MONOP = { # map global offset in Watts form IMO_4_27
"100-1a": 2.24832e-15, "100-1b": 6.41207e-15, "100-2a": 2.29479e-15, "100-2b": -1.08498e-15,
"100-3a": 5.56664e-15, "100-3b": 4.50454e-15, "100-4a": 6.32046e-16, "100-4b": 3.36947e-15,
"143-1a": 7.41328e-15, "143-1b": 5.24078e-15, "143-2a": 5.29157e-15, "143-2b": 2.89947e-15,
"143-3a": 5.70825e-15, "143-3b": 6.44803e-15, "143-4a": 2.01056e-15, "143-4b": 2.69781e-15,
"143-5":  4.98859e-15, "143-6":  4.80041e-15, "143-7":  4.6596e-15,
"217-1":  4.21112e-15, "217-2":  7.22058e-15, "217-3":  9.16302e-15, "217-4":  1.12043e-14,
"217-5a": 2.80877e-15, "217-5b": 8.98974e-15, "217-6a": 2.94844e-15, "217-6b": 6.27029e-15,
"217-7a": 5.24579e-15, "217-7b": 4.02908e-15, "217-8a": 5.59539e-15, "217-8b": 1.42579e-15,
"353-1":  6.95535e-15, "353-2":  5.18072e-15, "353-3a": 5.56678e-15, "353-3b": 2.18627e-15,
"353-4a": 1.24066e-15, "353-4b": 5.55313e-15, "353-5a": 1.67738e-15, "353-5b": 4.36146e-15,
"353-6a": 5.95224e-15, "353-6b": 1.04668e-14, "353-7":  8.20318e-15, "353-8":  5.30259e-15,
"545-1":  3.81797e-14, "545-2":  2.56581e-14,                        "545-4":  2.82291e-14,
"857-1":  2.70919e-14, "857-2":  3.18766e-14, "857-3": 2.12733e-14,  "857-4":  3.33599e-14}

DX11NEP = { # in Watts
"100-1a": 2.656e-17, "100-1b": 2.701e-17, "100-2a": 2.006e-17, "100-2b": 2.942e-17,
"100-3a": 1.539e-17, "100-3b": 1.552e-17, "100-4a": 2.416e-17, "100-4b": 2.63e-17,
"143-1a": 1.491e-17, "143-1b": 1.957e-17, "143-2a": 1.392e-17, "143-2b": 1.524e-17,
"143-3a": 1.554e-17, "143-3b": 1.329e-17, "143-4a": 1.515e-17, "143-4b": 1.542e-17,
"143-5":  1.882e-17, "143-6":  1.719e-17, "143-7":  1.629e-17,
"217-1":  1.595e-17, "217-2":  1.592e-17, "217-3":  1.582e-17, "217-4":  1.438e-17,
"217-5a": 1.735e-17, "217-5b": 1.531e-17, "217-6a": 1.721e-17, "217-6b": 1.648e-17,
"217-7a": 1.589e-17, "217-7b": 1.505e-17, "217-8a": 1.743e-17, "217-8b": 1.715e-17,
"353-1":  1.454e-17, "353-2":  1.615e-17, "353-3a": 2.058e-17, "353-3b": 1.699e-17,
"353-4a": 1.453e-17, "353-4b": 1.51e-17,  "353-5a": 1.616e-17, "353-5b": 1.628e-17,
"353-6a": 1.676e-17, "353-6b": 1.455e-17, "353-7":  1.473e-17, "353-8":  1.513e-17,
"545-1":  2.238e-17, "545-2":  1.901e-17,                      "545-4":  1.798e-17,
"857-1":  2.284e-17, "857-2":  2.397e-17, "857-3":  2.137e-17, "857-4":  2.087e-17}

#
# RD12CALIB, RD12MONOP and RD12NEP are extracted from RD12 sroll parameter files
# located in magique4:/wrk/delouis/SROLL/Level2/Task_pkg/SrollEx/sroll/Params/RD12_RC2
# (see function make_dictionaries_from_sroll_pramaeter_files)
#

RD12CALIB = {
"100-1a": 1.00340513024e-13, "100-1b": 1.23240311873e-13, "100-4a": 1.46826316998e-13, "100-4b": 1.17469574177e-13,
"100-2a": 1.51966997388e-13, "100-2b": 1.5885889296e-13,  "100-3a": 1.38652193689e-13, "100-3b": 1.1492356927e-13,
"143-1a": 1.88008633662e-13, "143-1b": 1.61678010691e-13, "143-3a": 1.79339046635e-13, "143-3b": 1.61409996829e-13,
"143-2a": 1.78260067e-13,    "143-2b": 1.82131500475e-13, "143-4a": 1.66035966523e-13, "143-4b": 1.55447052831e-13,
"143-5":  2.65238565653e-13, "143-6":  2.381597318e-13,   "143-7":  2.57719266261e-13,
"217-5a": 1.14058850217e-13, "217-5b": 1.15245126451e-13, "217-7a": 1.24037931807e-13, "217-7b": 1.19572741647e-13,
"217-6a": 1.15733750737e-13, "217-6b": 1.17133951737e-13, "217-8a": 1.20172971416e-13, "217-8b": 1.1391920766e-13,
"217-1":  1.68882666765e-13, "217-2":  1.62797073142e-13, "217-3":  1.71515434481e-13, "217-4": 1.66584754679e-13,
"353-3a": 3.505451069e-14,   "353-3b": 3.46195375785e-14, "353-5a": 3.31816651442e-14, "353-5b": 3.30720800648e-14,
"353-4a": 2.89764285963e-14, "353-4b": 2.89508885946e-14, "353-6a": 2.38419917429e-14, "353-6b": 2.16742504299e-14,
"353-1":  5.81896764062e-14, "353-2":  6.31788126648e-14, "353-7":  4.79439720697e-14, "353-8": 4.50246808415e-14,
"545-1":  3.29932298836e-16, "545-2":  3.08792864906e-16, "545-4":  2.64855405172e-16,
"857-1":  3.30076826046e-16, "857-2":  3.55811287601e-16, "857-3":  3.18681631353e-16, "857-4": 2.219187708e-16}

RD12MONOP = {
"100-1a": 2.2605358109e-15,  "100-1b":  6.33346357328e-15, "100-4a": 6.29208169223e-16, "100-4b": 3.36970326506e-15,
"100-2a": 2.33868290562e-15, "100-2b": -1.13641813483e-15, "100-3a": 5.53657151251e-15, "100-3b": 4.45056923088e-15,
"143-1a": 7.3995195043e-15,  "143-1b":  5.32325733232e-15, "143-3a": 5.75907091845e-15, "143-3b": 6.44604950677e-15,
"143-2a": 5.29193929445e-15, "143-2b":  2.9348297266e-15,  "143-4a": 1.99766939061e-15, "143-4b": 2.69626805994e-15,
"143-5":  5.3087867885e-15,  "143-6":   4.95338905598e-15, "143-7":  4.67336488715e-15,
"217-5a": 2.80761299651e-15, "217-5b":  8.9805619758e-15,  "217-7a": 5.25596376897e-15, "217-7b": 4.02970261138e-15,
"217-6a": 3.04610354346e-15, "217-6b":  6.28524515573e-15, "217-8a": 5.61649675718e-15, "217-8b": 1.42911330698e-15,
"217-1":  4.19798716956e-15, "217-2":   7.21865509517e-15, "217-3":  9.17652991993e-15, "217-4":  1.12013312388e-14,
"353-3a": 5.56785361889e-15, "353-3b":  2.18112475466e-15, "353-5a": 1.68104224305e-15, "353-5b": 4.36286171304e-15,
"353-4a": 1.23924007679e-15, "353-4b":  5.55355317474e-15, "353-6a": 5.95276400648e-15, "353-6b": 1.04699754947e-14,
"353-1":  6.95575630847e-15, "353-2":   5.18389125391e-15, "353-7":  8.20371783001e-15, "353-8":  5.30152463514e-15,
"545-1":  3.82437622616e-14, "545-2":   2.57192447573e-14, "545-4":  2.82843952366e-14,
"857-1":  2.7228011807e-14,  "857-2":   3.20205460445e-14, "857-3":  2.14043411258e-14, "857-4":  3.3436884405e-14}

RD12NEP = {
"100-1a": 2.4767234259e-16,  "100-1b": 2.56729781043e-16, "100-4a": 2.26421345033e-16, "100-4b": 2.45551518841e-16,
"100-2a": 1.84486488103e-16, "100-2b": 2.68522224152e-16, "100-3a": 1.45183188975e-16, "100-3b": 1.46602765997e-16,
"143-1a": 1.43494770343e-16, "143-1b": 1.91452982801e-16, "143-3a": 1.49002842269e-16, "143-3b": 1.29914524043e-16,
"143-2a": 1.34662861911e-16, "143-2b": 1.47483374152e-16, "143-4a": 1.46058872792e-16, "143-4b": 1.49667609571e-16,
"143-5":  1.8148147328e-16,  "143-6":  1.65716991561e-16, "143-7":  1.57075016643e-16,
"217-5a": 1.67331426436e-16, "217-5b": 1.46628673336e-16, "217-7a": 1.54985747982e-16, "217-7b": 1.46628673336e-16,
"217-6a": 1.65906925076e-16, "217-6b": 1.59924019363e-16, "217-8a": 1.69800562127e-16, "217-8b": 1.65906925076e-16,
"217-1":  1.52801512563e-16, "217-2":  1.52706545805e-16, "217-3":  1.52136745261e-16, "217-4":  1.3931623302e-16,
"353-3a": 1.9971509069e-16,  "353-3b": 1.6324785587e-16,  "353-5a": 1.56030382312e-16, "353-5b": 1.57169983401e-16,
"353-4a": 1.40075967079e-16, "353-4b": 1.4577397252e-16,  "353-6a": 1.62393155054e-16, "353-6b": 1.40550800866e-16,
"353-1":  1.39791066807e-16, "353-2":  1.55840448798e-16, "353-7":  1.41975302226e-16, "353-8":  1.46628673336e-16,
"545-1":  2.06267796946e-16, "545-2":  1.7863247056e-16,  "545-4":  1.63152889113e-16,
"857-1":  2.17663807827e-16, "857-2":  2.36372259024e-16, "857-3":  2.08546999122e-16, "857-4":  2.01804359351e-16}

XPOL = { # CrossPol, aka Polar Leakage, aka epsilon
"100-1a": 0.0272, "100-1b": 0.0293, "100-2a": 0.0195, "100-2b": 0.0513,
"100-3a": 0.0521, "100-3b": 0.0339, "100-4a": 0.0219, "100-4b": 0.0402,
"143-1a": 0.0915, "143-1b": 0.0835, "143-2a": 0.067,  "143-2b": 0.0572,
"143-3a": 0.0875, "143-3b": 0.053,  "143-4a": 0.0357, "143-4b": 0.0371,
"143-5":  0.882,  "143-6":  0.92,   "143-7":  0.974,
"217-1":  0.926,  "217-2":  0.961,  "217-3":  0.924,  "217-4":  0.916,
"217-5a": 0.0256, "217-5b": 0.0246, "217-6a": 0.026,  "217-6b": 0.0236,
"217-7a": 0.0307, "217-7b": 0.0327, "217-8a": 0.0298, "217-8b": 0.0303,
"353-1":  0.938,  "353-2":  0.91,   "353-3a": 0.0583, "353-3b": 0.0413,
"353-4a": 0.0683, "353-4b": 0.0439, "353-5a": 0.0829, "353-5b": 0.0661,
"353-6a": 0.0664, "353-6b": 0.0595, "353-7":  0.852,  "353-8":  0.855,
"545-1":  0.913,  "545-2":  0.894,                    "545-4":  0.89,
"857-1":  0.887,  "857-2":  0.883,  "857-3":  0.856,  "857-4":  0.897}

POLANG_RAD = { # bolometer polar angle in radians from IMO 4.27
"100-1a":  0.403187,   "100-1b": -1.1903,
"100-4a": -0.410136,   "100-4b":  1.18684,
"100-2a":  0.787163,   "100-2b": -0.797596,
"100-3a":  0.00351092, "100-3b": -1.56903,
"143-1a":  0.794112,   "143-1b": -0.738287,
"143-2a":  0.792367,   "143-2b": -0.781921,
"143-3a": -0.00524831, "143-3b": -1.5167,
"143-4a":  0.0156959,  "143-4b":  1.55857,
"143-5":   1.14666,    "143-6":   1.23219, "143-7": 1.79418, "143-8": 1.32121,
"217-1":   1.71741,    "217-2":   1.43991, "217-3": 2.98278, "217-4": 2.0944,
"217-5a":  0.82031,    "217-5b": -0.766195,
"217-6a":  0.804602,   "217-6b": -0.769686,
"217-7a": -0.00697611, "217-7b": -1.56206,
"217-8a":  0.00524116, "217-8b": -1.55857,
"353-1":   1.79943,    "353-2":   2.00015,
"353-3a":  0.794125,   "353-3b": -0.804597,
"353-4a":  0.797616,   "353-4b": -0.774927,
"353-5a": -0.0401425,  "353-5b":  1.56382,
"353-6a": -0.00523602, "353-6b":  1.56207,
"353-7":   2.12058,    "353-8":   2.32129,
"545-1":   2.25321,    "545-2":   2.42775, "545-3": 2.62323, "545-4": 2.54119,
"857-1":   2.7454,     "857-2":   1.89193, "857-3": 3.08574, "857-4": 2.82568,
"Dark1":   0.0,        "Dark2":   0.0}

PHOTWNOISE = { # Photonic White Noise Level as fitted by Luca (from 22 July 2016 email), 1 = use default IMO value
"100-1a": 0.0003453742, "100-1b": 0.0002825132, "100-2a": 0.0003800425, "100-2b": 0.0003669308,
"100-3a": 0.0004422216, "100-3b": 0.0004907688, "100-4a": 0.0004857364, "100-4b": 0.0004923459,
"143-1a": 0.0004143091, "143-1b": 0.0003826254, "143-2a": 0.0003921274, "143-2b": 0.0003542067,
"143-3a": 0.0003829098, "143-3b": 0.000311522,  "143-4a": 0.0004047522, "143-4b": 0.000380258,
"143-5":  0.0002745350, "143-6":  0.0001943095, "143-7":  0.0003150799,            
"217-1":  0.0003335840, "217-2":  0.0004640592, "217-3":  0.0004170061, "217-4":  0.0005602959,
"217-5a": 0.0006679581, "217-5b": 0.0006236201, "217-6a": 0.0006138816, "217-6b": 0.0004812616,
"217-7a": 0.0006891292, "217-7b": 0.0006468406, "217-8a": 0.0005374355, "217-8b": 0.0006339305,
"353-1":  0.0023645626, "353-2":  0.0025247218, "353-3a": 0.0019419246, "353-3b": 0.0024796827,
"353-4a": 0.0028483883, "353-4b": 0.0026202429, "353-5a": 0.002220174,  "353-5b": 0.0022777722,
"353-6a": 0.0023446071, "353-6b": 0.0018513569, "353-7":  0.0014215492, "353-8":  0.0018902246,
# Jan 2017 fit (first value is DX11 E2E WN, 2nd is KCMB2MJY/sr, 3rd is ODD-EVEN fit factor)
# 545 noise fit is done for 2000 < ell < 3000
# 857 noise fit is done for 500 < ell < 2000
"545-1": 0.75309, # 0.008317 * 57.0831 * 1.586263,
"545-2": 0.61891, # 0.007216 * 58.8824 * 1.456623,
"545-4": 0.73764, # 0.008010 * 58.0595 * 1.586147,
"857-1": 0.90890, # 0.215838 * 2.18904 * 1.923707,
"857-2": 0.91567, # 0.207078 * 2.34559 * 1.885195,
"857-3": 0.83313, # 0.216422 * 2.21322 * 1.739366,
"857-4": 1.49447} # 0.251576 * 2.40212 * 2.473011}

ELECWNOISE = { # Electronic White Noise Level as fitted by Luca (from 22 July 2016 email), 1 = use default IMO value
"100-1a": 0.0008386264,  "100-1b": 0.00073098375, "100-2a": 0.0005641772,  "100-2b": 0.0005980263,
"100-3a": 0.0006439428,  "100-3b": 0.0007450827,  "100-4a": 0.00055318625, "100-4b": 0.00073085315,
"143-1a": 0.0005150505,  "143-1b": 0.00060304495, "143-2a": 0.00053918445, "143-2b": 0.00054130285,
"143-3a": 0.00056875445, "143-3b": 0.00062126635, "143-4a": 0.0005863361,  "143-4b": 0.00065749415,
"143-5":  0.00043465489, "143-6":  0.00049627781, "143-7":  0.00044247792,            
"217-1":  0.00083782248, "217-2":  0.00082833667, "217-3":  0.00080165689, "217-4":  0.00075038197,
"217-5a": 0.00086720205, "217-5b": 0.0008914659,  "217-6a": 0.0008170679,  "217-6b": 0.00088116515,
"217-7a": 0.000787512,   "217-7b": 0.0007925963,  "217-8a": 0.00085505015, "217-8b": 0.00086504955,
"353-1":  0.0013189413,  "353-2":  0.0008697327,  "353-3a": 0.00365165,    "353-3b": 0.00309867875,
"353-4a": 0.0032893797,  "353-4b": 0.00331823545, "353-5a": 0.00285956035, "353-5b": 0.0030436851,
"353-6a": 0.0049803531,  "353-6b": 0.0054133415,  "353-7":  0.0029201967,  "353-8":  0.0029123702,
# Jan 2017 fit (first value is DX11 E2E WN, 2nd is KCMB2MJY/sr, 3rd is ODD-EVEN fit factor)
# 545 noise fit is done for 2000 < ell < 3000
# 857 noise fit is done for 500 < ell < 2000
"545-1": 0.69662, # 0.008317 * 57.0831 * 1.467326,
"545-2": 0.67799, # 0.007216 * 58.8824 * 1.595665,
"545-4": 0.71091, # 0.008010 * 58.0595 * 1.528668,
"857-1": 0.84432, # 0.215838 * 2.18904 * 1.787010,
"857-2": 0.88398, # 0.207078 * 2.34559 * 1.819957,
"857-3": 0.92661, # 0.216422 * 2.21322 * 1.934517,
"857-4": 0.84652} # 0.251576 * 2.40212 * 1.400797}

FWHMDEG = { # beam full width at half maximum in degrees from IMO 4.27
"100-1a": 0.159799, "100-1b": 0.161107, "100-2a": 0.158735, "100-2b": 0.158780,
"100-3a": 0.158771, "100-3b": 0.158818, "100-4a": 0.160669, "100-4b": 0.159766,
"143-1a": 0.118336, "143-1b": 0.119077, "143-2a": 0.117330, "143-2b": 0.117489,
"143-3a": 0.118278, "143-3b": 0.117498, "143-4a": 0.119587, "143-4b": 0.119503,
"143-5":  0.121678, "143-6":  0.120757,                     "143-7":  0.120960,
"217-1":  0.081332, "217-2":  0.080359, "217-3":  0.080120, "217-4":  0.082019,
"217-5a": 0.083144, "217-5b": 0.083577, "217-6a": 0.081037, "217-6b": 0.080927,
"217-7a": 0.081380, "217-7b": 0.081632, "217-8a": 0.082102, "217-8b": 0.082645,
"353-1":  0.080433, "353-2":  0.079043, "353-3a": 0.077785, "353-3b": 0.077835,
"353-4a": 0.078632, "353-4b": 0.078441, "353-5a": 0.077277, "353-5b": 0.078225,
"353-6a": 0.078225, "353-6b": 0.079257, "353-7":  0.078097, "353-8":  0.080510,
"545-1":  0.077854, "545-2":  0.071763, "545-4":  0.082423,
"857-1":  0.072533, "857-2":  0.073395, "857-3":  0.072723, "857-4":  0.072287,
# Effective Beam FWHM
# LFI from L02: https://arxiv.org/pdf/1807.06206.pdf, table 1 p.4
# HFI from L03: https://arxiv.org/pdf/1807.06207, table 12 p.47
 "33": 32.29/60.0,  "44": 26.99/60.0,  "70": 13.22/60.0, 
"100":  9.68/60.0, "143":  7.30/60.0, "217":  5.02/60.0,
"353":  4.94/60.0, "545":  4.83/60.0, "857":  4.64/60.0,}


KCMB2MJY = { # conversion factor from KCMB to MJy/sr from IMO_4_27
"545-1": 57.0831, "545-2": 58.8824, "545-3": 57.8793, "545-4": 58.0595,
"857-1": 2.18904, "857-2": 2.34559, "857-3": 2.21322, "857-4": 2.40212 }

POPCORNED = {"143-8": "70_143_8",
             "545-3": "55_545_3"}

DARKS = {"Dark1": "15_Dark1",
         "Dark2": "75_Dark2"}

SENSORS = ( # for reference...
"90_Ther_100mK1",
"91_Ther_PID2N_100mKPlate",
"92_Ther_PID1N_100mK",
"93_Ther_PID1_6N",
"94_Ther_1_6K1",
"95_Ther_PID4N",
"A0_Resistor",
"A1_Capa2",
"A2_Ther_100mK2",
"A3_Ther_PID1_6R",
"A4_Ther_4KH1",
"A5_Ther_4KL1",
"B0_Ther_PID2R_100mKPlate",
"B1_Ther_PID1R_100mK",
"B2_Ther_1_6K2",
"B3_Ther_PID4R",
"B4_Ther_4KH2",
"B5_Ther_4KL2")


def BC2IDX( bc):
  return( int(bc) / 10 * 6 + int(bc) % 10)


def IDX2BC( idx):
  return( int(idx) / 6 * 10 + int(idx) % 6)


def BC2BOLOID( bc):
  bc = int(str(bc)[0:2])
  for b in BOLOID.values() + POPCORNED.values() + DARKS.values():
    if bc == int(b[0:2]):
      return b

def COPSB( pixname):
  if pixname.endswith( "a"):
    return pixname[:-1]+"b"
  elif pixname.endswith( "b"):
    return pixname[:-1]+"a"
  else:
    # no COPSB for SWBs...
    return pixname
  
def make_dictionaries_from_imo():
  # needs a working HFI DMC...
  import LSCtools
  pixlist = [b for b in BOLOID.keys()]
  pixlist.sort()
  try:    imo_id = LSCtools.Get_IMO_4_27_ID()
  except: imo_id = "/data/dmc/MISS03/METADATA%1731634056892899949"
  print "CALIB = { # conversion factor from KCMB to Watts"
  for pixname in pixlist:
    cal = LSCtools.GetCalibFactor(pixname, imo_id)
    print '"%s": %g,' % (pixname, cal),
  print "}"
  print "MONOP = { # map global offset in Watts"
  for pixname in pixlist:
    monop = LSCtools.GetMonopole(pixname, imo_id)
    print '"%s": %g,' % (pixname, monop),
  print "}"
  print "NEP = { # in Watts"
  for pixname in pixlist:
    nep = LSCtools.GetTotalNoiseNEP(pixname, imo_id)
    print '"%s": %g,' % (pixname, nep),
  print "}"
  print "XPOL = { # CrossPol, aka Polar Leakage, aka epsilon"
  for pixname in pixlist:
    xpol = LSCtools.GetPolarLeakage(pixname, imo_id)
    print '"%s": %g,' % (pixname, xpol),
  print "}"


def make_dictionaries_from_sroll_pramaeter_files():
  allpixnames = DETSETS["100ghz"] + DETSETS["143ghz"] + DETSETS["217ghz"] + DETSETS["353ghz"] + DETSETS["545ghz"] + DETSETS["857ghz"]
  detsets = ["100ds1", "100ds2", "143ds1", "143ds2", "143swb", "217ds1", "217ds2", "217swb", "353ds1", "353ds2", "353swb", "545ghz", "857ghz"]
  parfdir = "/wrk/delouis/SROLL/Level2/Task_pkg/SrollEx/sroll/Params/RD12_RC2/"
  parfiles = ["param%d.txt"%freq for freq in [100, 143, 217, 353, 545, 857]]
  
  pixnames = dict()
  calib = dict()
  monop = dict()
  nep = dict()
  
  for parfile in parfiles:
    f = open( parfdir + parfile, "r")
    lines = f.readlines()
    f.close()
    param = "Ptg_noPS"
    for line in lines:
      if line.startswith( param):
        key, val = line.split("=")[0:2]
        idx = int( key[len( param):])
        for p in allpixnames:
          if p in val:
            pixnames[idx] = p
    param = "Calibration"
    for line in lines:
      if line.startswith( param):
        key, val = line.split("=")[0:2]
        idx = int( key[len( param):])
        calib[pixnames[idx]] = val.strip()
    param = "Monop"
    for line in lines:
      if line.startswith( param):
        key, val = line.split("=")[0:2]
        idx = int( key[len( param):])
        monop[pixnames[idx]] = val.strip()
    print monop
    param = "NEP"
    for line in lines:
      if line.startswith( param):
        key, val = line.split("=")[0:2]
        idx = int( key[len( param):])
        nep[pixnames[idx]] = val.strip()

  print "RD12CALIB = {" 
  for detset in detsets:
    for pixname in DETSETS[detset]:
      print '"%s": %s,' % (pixname, calib[pixname]), 
    print 
  print "RD12MONOP = {" 
  for detset in detsets:
    for pixname in DETSETS[detset]:
      print '"%s": %s,' % (pixname, monop[pixname]), 
    print
  print "RD12NEP = {" 
  for detset in detsets:
    for pixname in DETSETS[detset]:
      print '"%s": %s,' % (pixname, nep[pixname]), 
    print
  
  
def make_c_functions():
  pixlist = sorted(BOLOID)
  print "double get_crosspol( char *pixname) {"
  for pixname in pixlist:
    print '  if (!strcmp( pixname, "%s")) return( %g);' % (pixname, XPOL[pixname])
  print '  fprintf( stderr, "get_crosspol(): Unkown pixname (%s)", pixname);'
  print '  exit( 1);'
  print "}"

  print "double get_RD12calib( char *pixname) {"
  for pixname in pixlist:
    print '  if (!strcmp( pixname, "%s")) return( %.12g);' % (pixname, RD12CALIB[pixname])
  print '  fprintf( stderr, "get_RD12calib(): Unkown pixname (%s)", pixname);'
  print '  exit( 1);'
  print "}"

  print "double get_RD12nep( char *pixname) {"
  for pixname in pixlist:
    print '  if (!strcmp( pixname, "%s")) return( %g);' % (pixname, RD12NEP[pixname])
  print '  fprintf( stderr, "get_RD12nep(): Unkown pixname (%s)", pixname);'
  print '  exit( 1);'
  print "}"

  print "double get_DX11calib( char *pixname) {"
  for pixname in pixlist:
    print '  if (!strcmp( pixname, "%s")) return( %g);' % (pixname, DX11CALIB[pixname])
  print '  fprintf( stderr, "get_DX11calib(): Unkown pixname (%s)", pixname);'
  print '  exit( 1);'
  print "}"

  print "double get_DX11nep( char *pixname) {"
  for pixname in pixlist:
    print '  if (!strcmp( pixname, "%s")) return( %g);' % (pixname, DX11NEP[pixname] * numpy.sqrt(180.3737))
  print '  fprintf( stderr, "get_DX11nep(): Unkown pixname (%s)", pixname);'
  print '  exit( 1);'
  print "}"


